"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requireOrFail = void 0;
var configurationError_1 = __importStar(require("../errors/configurationError"));
/**
 * Function tries to require module and throw error if module is not found.
 * @param module - Module name or path
 * @param dependencyName NPM name of the requested module
 * @param allowedVersions Allowed versions of requested module
 * @throws ConfigurationError
 */
function requireOrFail(module, dependencyName, allowedVersions) {
    try {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        return require(module);
    }
    catch (e) {
        throw new configurationError_1.default(configurationError_1.ConfigurationErrorCode.DependencyMissing, {
            dependency: dependencyName,
            version: allowedVersions,
        });
    }
}
exports.requireOrFail = requireOrFail;
